main.datasource.url = jdbc:postgresql://localhost:5439/tathminidev4
main.datasource.username = postgres
main.datasource.password = root
main.datasource.driver-class-name = org.postgresql.Driver
main.liquibase.change-log=com/company/tathminiv2/liquibase/changelog.xml

jmix.ui.login-view-id = LoginView
jmix.ui.main-view-id = MainView
jmix.ui.menu-config = com/company/tathminiv2/menu.xml
jmix.ui.composite-menu = true

ui.login.defaultUsername = admin
ui.login.defaultPassword = admin

jmix.core.available-locales = en

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.protocol=smtp
spring.mail.username=manaseschege0@gmail.com
spring.mail.password=ymej cszc gpsj pmmm
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

jmix.rest.anonymous-url-patterns=/rest/**,\
  /rest/services/**,\
  /api/**,\
  /users/**


logging.level.org.springframework.security = TRACE

# Launch the default browser when starting the application in development mode
vaadin.launch-browser = false

# Use pnpm to speed up project initialization and save disk space
vaadin.pnpm.enable = true

logging.level.org.atmosphere = warn

# 'debug' level logs SQL generated by EclipseLink ORM
logging.level.eclipselink.logging.sql = info

# 'debug' level logs data store operations
logging.level.io.jmix.core.datastore = info

# 'debug' level logs access control constraints
logging.level.io.jmix.core.AccessLogger = debug

# 'debug' level logs all Jmix debug output
logging.level.io.jmix = info


# The client id is my-client
spring.security.oauth2.authorizationserver.client.myclient.registration.client-id=client
# The client secret (password) is my-secret
spring.security.oauth2.authorizationserver.client.myclient.registration.client-secret={noop}secret
# Enable Client Credential grant for the my-client
spring.security.oauth2.authorizationserver.client.myclient.registration.authorization-grant-types=client_credentials
# Client credentials must be passed in the Authorization header using the HTTP Basic authentication scheme
spring.security.oauth2.authorizationserver.client.myclient.registration.client-authentication_methods=client_secret_basic
# Use opaque tokens instead of JWT
spring.security.oauth2.authorizationserver.client.myclient.token.access-token-format=reference
# access token time-to-live
spring.security.oauth2.authorizationserver.client.myclient.token.access-token-time-to-live=24h


# my-client is the client id we configured previously
jmix.authserver.client.myclient.client-id = client
jmix.authserver.client.myclient.resource-roles = user-management, rest-minimal